Processing:include/SDL2/SDL_platform.h
Processing:include/SDL2/SDL_stdinc.h
***** Warning - function pointer type has const* parameters *****
int (const void *, const void *)
***** Warning - function pointer type has const* parameters *****
int (const void *, const void *)
include/SDL2/SDL_stdinc.h [478] : Failed to convert params for function: SDL_memset
extern DECLSPEC void *SDLCALL SDL_memset(SDL_OUT_BYTECAP(len) void *dst, int c, size_t len)
include/SDL2/SDL_stdinc.h [515] : Failed to convert params for function: SDL_memcpy
extern DECLSPEC void *SDLCALL SDL_memcpy(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)
include/SDL2/SDL_stdinc.h [517] : Failed to convert params for function: SDL_memmove
extern DECLSPEC void *SDLCALL SDL_memmove(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)
include/SDL2/SDL_stdinc.h [521] : Failed to convert params for function: SDL_wcslcpy
extern DECLSPEC size_t SDLCALL SDL_wcslcpy(SDL_OUT_Z_CAP(maxlen) wchar_t *dst, const wchar_t *src, size_t maxlen)
include/SDL2/SDL_stdinc.h [522] : Failed to convert params for function: SDL_wcslcat
extern DECLSPEC size_t SDLCALL SDL_wcslcat(SDL_INOUT_Z_CAP(maxlen) wchar_t *dst, const wchar_t *src, size_t maxlen)
include/SDL2/SDL_stdinc.h [532] : Failed to convert params for function: SDL_strlcpy
extern DECLSPEC size_t SDLCALL SDL_strlcpy(SDL_OUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen)
include/SDL2/SDL_stdinc.h [533] : Failed to convert params for function: SDL_utf8strlcpy
extern DECLSPEC size_t SDLCALL SDL_utf8strlcpy(SDL_OUT_Z_CAP(dst_bytes) char *dst, const char *src, size_t dst_bytes)
include/SDL2/SDL_stdinc.h [534] : Failed to convert params for function: SDL_strlcat
extern DECLSPEC size_t SDLCALL SDL_strlcat(SDL_INOUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen)
include/SDL2/SDL_stdinc.h [567] : Failed to convert params for function: SDL_snprintf
extern DECLSPEC int SDLCALL SDL_snprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, SDL_PRINTF_FORMAT_STRING const char *fmt, ... )
include/SDL2/SDL_stdinc.h [568] : Failed to convert params for function: SDL_vsnprintf
extern DECLSPEC int SDLCALL SDL_vsnprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, const char *fmt, va_list ap)
include/SDL2/SDL_stdinc.h [712] : Failed to convert params for function: SDL_memcpy4
SDL_FORCE_INLINE void *SDL_memcpy4(SDL_OUT_BYTECAP(dwords*4) void *dst, SDL_IN_BYTECAP(dwords*4) const void *src, size_t dwords)
{
    return SDL_memcpy(dst, src, dwords * 4);
}
Processing:include/SDL2/SDL_main.h
Processing:include/SDL2/SDL_assert.h
***** Warning - function pointer type has const* parameters *****
SDL_AssertState (const SDL_AssertData *, void *)
Processing:include/SDL2/SDL_atomic.h
Processing:include/SDL2/SDL_error.h
Processing:include/SDL2/SDL_endian.h
Processing:include/SDL2/SDL_mutex.h
Processing:include/SDL2/SDL_thread.h
include/SDL2/SDL_thread.h [114] : Failed to convert typedef type: 

Processing:include/SDL2/SDL_rwops.h
***** Warning - function pointer type has const* parameters *****
size_t (struct SDL_RWops *, const void *, size_t, size_t)
include/SDL2/SDL_rwops.h [147] : Failed to convert type of field: hidden
union
    {
#if defined(__ANDROID__)
        struct
        {
            void *asset;
        } androidio;
#elif defined(__WIN32__)
        struct
        {
            SDL_bool append;
            void *h;
            struct
            {
                void *data;
                size_t size;
                size_t left;
            } buffer;
        } windowsio;
#elif defined(__VITA__)
        struct
        {
            int h;
            struct
            {
                void *data;
                size_t size;
                size_t left;
            } buffer;
        } vitaio;
#endif

#ifdef HAVE_STDIO_H
        struct
        {
            SDL_bool autoclose;
            FILE *fp;
        } stdio;
#endif
        struct
        {
            Uint8 *base;
            Uint8 *here;
            Uint8 *stop;
        } mem;
        struct
        {
            void *data1;
            void *data2;
        } unknown;
    } hidden
Processing:include/SDL2/SDL_audio.h
Processing:include/SDL2/SDL_clipboard.h
Processing:include/SDL2/SDL_cpuinfo.h
Processing:include/SDL2/SDL_pixels.h
Processing:include/SDL2/SDL_rect.h
Processing:include/SDL2/SDL_blendmode.h
Processing:include/SDL2/SDL_surface.h
Processing:include/SDL2/SDL_video.h
***** Warning - function pointer type has const* parameters *****
SDL_HitTestResult (SDL_Window *, const SDL_Point *, void *)
Processing:include/SDL2/SDL_scancode.h
Processing:include/SDL2/SDL_keycode.h
Processing:include/SDL2/SDL_keyboard.h
Processing:include/SDL2/SDL_mouse.h
Processing:include/SDL2/SDL_joystick.h
Processing:include/SDL2/SDL_sensor.h
Processing:include/SDL2/SDL_gamecontroller.h
include/SDL2/SDL_gamecontroller.h [97] : Failed to convert type of field: value
union
    {
        int button;
        int axis;
        struct {
            int hat;
            int hat_mask;
        } hat;
    } value
Processing:include/SDL2/SDL_touch.h
Processing:include/SDL2/SDL_gesture.h
Processing:include/SDL2/SDL_events.h
include/SDL2/SDL_events.h [610] : ***** Union SDL_Event converted to empty struct *****
union SDL_Event
{
    Uint32 type;                            /**< Event type, shared with all events */
    SDL_CommonEvent common;                 /**< Common event data */
    SDL_DisplayEvent display;               /**< Display event data */
    SDL_WindowEvent window;                 /**< Window event data */
    SDL_KeyboardEvent key;                  /**< Keyboard event data */
    SDL_TextEditingEvent edit;              /**< Text editing event data */
    SDL_TextEditingExtEvent editExt;        /**< Extended text editing event data */
    SDL_TextInputEvent text;                /**< Text input event data */
    SDL_MouseMotionEvent motion;            /**< Mouse motion event data */
    SDL_MouseButtonEvent button;            /**< Mouse button event data */
    SDL_MouseWheelEvent wheel;              /**< Mouse wheel event data */
    SDL_JoyAxisEvent jaxis;                 /**< Joystick axis event data */
    SDL_JoyBallEvent jball;                 /**< Joystick ball event data */
    SDL_JoyHatEvent jhat;                   /**< Joystick hat event data */
    SDL_JoyButtonEvent jbutton;             /**< Joystick button event data */
    SDL_JoyDeviceEvent jdevice;             /**< Joystick device change event data */
    SDL_ControllerAxisEvent caxis;          /**< Game Controller axis event data */
    SDL_ControllerButtonEvent cbutton;      /**< Game Controller button event data */
    SDL_ControllerDeviceEvent cdevice;      /**< Game Controller device event data */
    SDL_ControllerTouchpadEvent ctouchpad;  /**< Game Controller touchpad event data */
    SDL_ControllerSensorEvent csensor;      /**< Game Controller sensor event data */
    SDL_AudioDeviceEvent adevice;           /**< Audio device event data */
    SDL_SensorEvent sensor;                 /**< Sensor event data */
    SDL_QuitEvent quit;                     /**< Quit request event data */
    SDL_UserEvent user;                     /**< Custom event data */
    SDL_SysWMEvent syswm;                   /**< System dependent window event data */
    SDL_TouchFingerEvent tfinger;           /**< Touch finger event data */
    SDL_MultiGestureEvent mgesture;         /**< Gesture event data */
    SDL_DollarGestureEvent dgesture;        /**< Gesture event data */
    SDL_DropEvent drop;                     /**< Drag and drop event data */

    /* This is necessary for ABI compatibility between Visual C++ and GCC.
       Visual C++ will respect the push pack pragma and use 52 bytes (size of
       SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit
       architectures) for this union, and GCC will use the alignment of the
       largest datatype within the union, which is 8 bytes on 64-bit
       architectures.

       So... we'll add padding to force the size to be 56 bytes for both.

       On architectures where pointers are 16 bytes, this needs rounding up to
       the next multiple of 16, 64, and on architectures where pointers are
       even larger the size of SDL_UserEvent will dominate as being 3 pointers.
    */
    Uint8 padding[sizeof(void *) <= 8 ? 56 : sizeof(void *) == 16 ? 64 : 3 * sizeof(void *)];
}
Processing:include/SDL2/SDL_filesystem.h
Processing:include/SDL2/SDL_haptic.h
include/SDL2/SDL_haptic.h [809] : ***** Union SDL_HapticEffect converted to empty struct *****
union SDL_HapticEffect
{
    /* Common for all force feedback effects */
    Uint16 type;                    /**< Effect type. */
    SDL_HapticConstant constant;    /**< Constant effect. */
    SDL_HapticPeriodic periodic;    /**< Periodic effect. */
    SDL_HapticCondition condition;  /**< Condition effect. */
    SDL_HapticRamp ramp;            /**< Ramp effect. */
    SDL_HapticLeftRight leftright;  /**< Left/Right effect. */
    SDL_HapticCustom custom;        /**< Custom effect. */
}
Processing:include/SDL2/SDL_hidapi.h
Processing:include/SDL2/SDL_hints.h
***** Warning - function pointer type has const* parameters *****
void (void *, const char *, const char *, const char *)
***** Warning - function pointer type has const* parameters *****
void (void *, const char *, const char *, const char *)
***** Warning - function pointer type has const* parameters *****
void (void *, const char *, const char *, const char *)
Processing:include/SDL2/SDL_loadso.h
Processing:include/SDL2/SDL_log.h
***** Warning - function pointer type has const* parameters *****
void (void *, int, SDL_LogPriority, const char *)
Processing:include/SDL2/SDL_messagebox.h
Processing:include/SDL2/SDL_metal.h
Processing:include/SDL2/SDL_power.h
Processing:include/SDL2/SDL_render.h
Processing:include/SDL2/SDL_shape.h
include/SDL2/SDL_shape.h [99] : ***** Union SDL_WindowShapeParams converted to empty struct *****
union {
    /** \brief A cutoff alpha value for binarization of the window shape's alpha channel. */
    Uint8 binarizationCutoff;
    SDL_Color colorKey;
}
Processing:include/SDL2/SDL_system.h
Processing:include/SDL2/SDL_timer.h
Processing:include/SDL2/SDL_version.h
Processing:include/SDL2/SDL_locale.h
Processing:include/SDL2/SDL_misc.h
Processing:include/SDL2/SDL.h

c2mx2: **** Success ***** - output saved to sdl.wx
